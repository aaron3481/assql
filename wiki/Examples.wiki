#labels Pending
#Examples of using asSQL (Beta 2.5 and later)

=== On This Page ===
[Examples#MySqlService_Example MySqlService Example]

[Examples#Token_Responder_Example_1 Token Responder Example 1]

[Examples#Token_Responder_Example_2 Token Responder Example 2]

[Examples#Event_Listeners_Example Event Listeners Example]

[Examples#Statement_Parameters_Example Statement Parameters Example]

[Examples#Inserting_Binary_Data_Example Inserting Binary Data Example]

[Examples#Selecting_Binary_Data_Example Selecting Binary Data Example]


=== MySqlService Example ===

This example is using MySqlService and DataGrid. The data grid's columns property and dataProvider property are bound to the MySqlService lastResult (ArrayCollection of Rows) and lastResultSet (The actual ResultSet).

{{{
<mx:Script>
	<![CDATA[
		import com.maclema.util.ResultsUtil;
		
		private function handleConnect(e:Event):void {
			service.send("select * from employees");
		}
	]]>
</mx:Script>
<assql:MySqlService id="service"
	hostname="localhost"
	username="root"
	password=""
	database="sampledb"
	autoConnect="true"
	connect="handleConnect(event)" />
	
<mx:DataGrid left="10" right="10" top="10" bottom="10" 
	columns="{ResultsUtil.getDataGridColumns(service.lastResultSet)}" 
	dataProvider="{service.lastResult}">
</mx:DataGrid>
}}}


=== Token Responder Example 1 ===

This is an example of using an AsyncResponder to handle a query.

{{{
public function getAllEmployees():void {
	var st:Statement = con.createStatement();
	
	var token:MySqlToken = st.executeQuery("SELECT * FROM employees");
	token.addResponder(new AsyncResponder(
		function result(data:Object, token:Object):void {
			Alert.show("Found " + ResultSet(data).size() + " employees!");
		},
		
		function fault(info:Object):void {
			Alert.show("Error: " + info);
		}
	));
}
}}}

=== Token Responder Example 2 ===

This is a more in depth example, using a class that extends AsyncResponder. With each statement, an info property is set on the MySqlToken. This way all queries and responses can be handled with the same result and fault handlers.

{{{
public class DatabaseAccess extends AsyncResponder
{
	private var con:Connection;
	
	public function DatabaseAccess()
	{
		//create the connection and connect
		con = new Connection("localhost", 3306, "root", "", "sampledb");
		con.addEventListener(Event.CONNECT, handleConnected);
		con.connect();
	}
	
	public function getAllEmployees():void {
		var st:Statement = con.createStatement();
		
		var token:MySqlToken = st.executeQuery("SELECT * FROM employees");
		token.info = "getAllEmployees";
		token.addResponder(this);
	}

	override public function result(data:Object, token:Object):void {
		var rs:ResultSet;
		var affectedRows:int;
		var insertID:int;
		
		if ( data is ResultSet ) {
			//SELECT statement
			rs = ResultSet(data);
		}
		else {
			//INSERT/UPDATE/DELETE statement
			affectedRows = data.affectedRows;
			insertID = data.insertID;
		}
		
		if ( token.info == "getAllEmployees" ) {
			Alert.show("Found " + rs.size() + " employees!");
		}
		else if ( token.info == "insertEmployee" ) {
			Alert.show("New Employee ID: " + insertID);
		}
	}
	
	override public function fault(info:Object):void {
		Alert.show("Error: " + info);
	}
}
}}}

=== Event Listeners Example ===

This is an example of using only event listeners to handle queries and responses.

{{{
TODO: Put code here.
}}}


=== Statement Parameters Example ===

This is an example of using parameters in a Statement.

{{{
TODO: Put code here.
}}}


=== Inserting Binary Data Example ===

This is an example of inserting binary data.

{{{
TODO: Put code here
}}}


=== Selecting Binary Data Example ===

This is an example of selecting binary data.


{{{
TODO: Put code here
}}}